@model SewingCompany.ViewModels.Worker.IndexWorkerViewModel
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common

<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewData["Title"] = "Workers";
}

<h1>Workers</h1>
<p>
    <a class="classic-button" asp-action="Create">Create New</a>
</p>
<!--Форма для поиска-->
@using (Html.BeginForm("Index", "Workers", FormMethod.Get))
{
    <p>Select section: 
        @Html.DropDownListFor(model => model.SelectedSection, Model.sections as SelectList) 
        @Html.CheckBoxFor(model => model.isSection)
    </p>
    <p>Not at time: 
        @Html.CheckBoxFor(model => model.isNotAtTime)
    </p>
    <p>
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new 
        { @class = "search-textbox" })
        <input class="classic-button" type="submit" value="Search" />
    </p>
}

<!--Номер страницы-->
Page @(Model.Workers.PageCount < Model.Workers.PageNumber ? 0 : Model.Workers.PageNumber) of @Model.Workers.PageCount
<!--Список страниц-->
<div class="pull-right">
    @Html.PagedListPager((IPagedList)Model.Workers, 
    page => Url.Action("Index", new { 
        page = page, 
        sortOrder = ViewBag.CurrentSort, 
        currentFilter = ViewBag.CurrentFilter, 
        isNotAtTime = Model.isNotAtTime, 
        isSection = Model.isSection 
    }), 
        new PagedListRenderOptions
        {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" },
        Display = PagedListDisplayMode.IfNeeded
        })
</div>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Id", "Index", new 
                { 
                    sortOrder = ViewBag.IdSortParm, 
                    currentFilter=ViewBag.CurrentFilter,
                    isNotAtTime = Model.isNotAtTime,
                    isSection = Model.isSection,
                    SelectedSection = Model.SelectedSection
                })
            </th>
            <th>
                @Html.ActionLink("Name", "Index", new
                {
                sortOrder = ViewBag.NameSortParm,
                    currentFilter=ViewBag.CurrentFilter,
                    isNotAtTime = Model.isNotAtTime,
                isSection = Model.isSection,
                SelectedSection = Model.SelectedSection
                })
            </th>
            <th>
                @Html.ActionLink("Section", "Index", new
                {
                sortOrder = ViewBag.SectionSortParm,
                    currentFilter=ViewBag.CurrentFilter,
                    isNotAtTime = Model.isNotAtTime,
                    isSection = Model.isSection,
                    SelectedSection = Model.SelectedSection
                })
            </th>
            <th>
                @Html.ActionLink("Position", "Index", new
                {
                sortOrder = ViewBag.PositionSortParm,
                    currentFilter=ViewBag.CurrentFilter,
                    isNotAtTime = Model.isNotAtTime,
                    isSection = Model.isSection,
                    SelectedSection = Model.SelectedSection
                })
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Workers) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Section)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Position)
            </td>
                <td>
                    <a class="change-button edit-button" asp-action="Edit" asp-route-id="@item.Id">Edit</a><a class="change-button details-button" asp-action="Details" asp-route-id="@item.Id">Details</a><a class="change-button delete-button" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                </td>
        </tr>
}
    </tbody>
</table>
<br />
Page @(Model.Workers.PageCount < Model.Workers.PageNumber ? 0 : Model.Workers.PageNumber) of @Model.Workers.PageCount

<div class="pull-right">
    @Html.PagedListPager((IPagedList)Model.Workers,
    page => Url.Action("Index", new {
    page = page,
    sortOrder = ViewBag.CurrentSort,
    currentFilter = ViewBag.CurrentFilter,
    isNotAtTime = Model.isNotAtTime,
    isSection = Model.isSection
    }),
    new PagedListRenderOptions
    {
    LiElementClasses = new string[] { "page-item" },
    PageClasses = new string[] { "page-link" },
    Display = PagedListDisplayMode.IfNeeded
    })
</div>
